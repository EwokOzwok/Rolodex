PredData$MLpred<- model %>% predict(test)
PredData$MLpred<-PredData$MLpred*100
PredData$MLerror<-PredData$MLtarget-PredData$MLpred
# Replicating testing split for LM validation
fit<-lm(CanDep~., data = OptimizationTrainingData)
summary(fit)
PredData$REGy<-OptimizationTestData$CanDep
PredData$REGyhat<-predict(fit, OptimizationTestData)
PredData$REGerror<-PredData$REGy-PredData$REGyhat
par(mfrow=c(3,2))
mean(abs(PredData$MLerror))
sd(PredData$MLerror)
mean(abs(PredData$REGerror))
sd(PredData$REGerror)
set.seed(888)
model<- keras_model_sequential()
model %>%
layer_dense(units=50, activation='relu', input_shape=c(14)) %>%
layer_dense(units=25, activation='relu') %>%
layer_dense(units=15, activation='relu') %>%
layer_dense(units=10, activation='relu') %>%
layer_dense(units=8, activation='relu') %>%
layer_dense(units=4, activation='relu') %>%
layer_dense(units=1)
# Here you can replace the optimizer_rmsprop with just optimizer="rmsprop" if you're not interested in tweaking the models
# this specification of the optimizer has other model tuning parameters you can specify, but you'll have to look them up.
#Compile
model %>% compile(loss= tf$metrics$mean_squared_error,
optimizer_rmsprop(learning_rate=.004),
metrics=tf$metrics$mae)
mymodel<- model %>%
fit(training,
trainingtarget,
epochs=50,
batch_size=32,
validation_split=.3)
# Evaluate ----------------------------------------------------------------
model %>% evaluate(test, testtarget)
pred<- model %>% predict(test)
mean(abs((testtarget-pred)*100))
sd(((testtarget-pred)*100))
plot(testtarget, pred)
summary(model)
set.seed(888)
model<- keras_model_sequential()
model %>%
layer_dense(units=50, activation='relu', input_shape=c(14)) %>%
layer_dense(units=25, activation='relu') %>%
layer_dense(units=15, activation='relu') %>%
layer_dense(units=10, activation='relu') %>%
layer_dense(units=8, activation='relu') %>%
layer_dense(units=4, activation='relu') %>%
layer_dense(units=1)
# Compiling the model -----------------------------------------------------
# Here you can replace the optimizer_rmsprop with just optimizer="rmsprop" if you're not interested in tweaking the models
# this specification of the optimizer has other model tuning parameters you can specify, but you'll have to look them up.
#Compile
model %>% compile(loss= tf$metrics$mean_squared_error,
optimizer_adam(learning_rate=.004),
metrics=tf$metrics$mae)
#optimizer_rmsprop(learning_rate=0.002, momentum=0.02),
# Fit model -------------------------------------------------------------
mymodel<- model %>%
fit(training,
trainingtarget,
epochs=50,
batch_size=32,
validation_split=.3)
set.seed(888)
model<- keras_model_sequential()
model %>%
layer_dense(units=50, activation='relu', input_shape=c(14)) %>%
layer_dropout(rate=.3) %>%
layer_dense(units=25, activation='relu') %>%
layer_dropout(rate=.3) %>%
layer_dense(units=15, activation='relu') %>%
layer_dense(units=10, activation='relu') %>%
layer_dense(units=8, activation='relu') %>%
layer_dense(units=4, activation='relu') %>%
layer_dense(units=1)
# Compiling the model -----------------------------------------------------
# Here you can replace the optimizer_rmsprop with just optimizer="rmsprop" if you're not interested in tweaking the models
# this specification of the optimizer has other model tuning parameters you can specify, but you'll have to look them up.
#Compile
model %>% compile(loss= tf$metrics$mean_squared_error,
optimizer_adam(learning_rate=.004),
metrics=tf$metrics$mae)
#optimizer_rmsprop(learning_rate=0.002, momentum=0.02),
# Fit model -------------------------------------------------------------
mymodel<- model %>%
fit(training,
trainingtarget,
epochs=100,
batch_size=32,
validation_split=.3)
PredData<-as.data.frame(matrix(data=NA, ncol = 6, nrow = 164))
colnames(PredData)<-c("MLtarget", "MLpred", "MLerror", "REGy", "REGyhat", "REGerror")
PredData$MLtarget<-testtarget*100
PredData$MLpred<- model %>% predict(test)
PredData$MLpred<-PredData$MLpred*100
PredData$MLerror<-PredData$MLtarget-PredData$MLpred
# Replicating testing split for LM validation
fit<-lm(CanDep~., data = OptimizationTrainingData)
summary(fit)
PredData$REGy<-OptimizationTestData$CanDep
PredData$REGyhat<-predict(fit, OptimizationTestData)
PredData$REGerror<-PredData$REGy-PredData$REGyhat
par(mfrow=c(3,2))
mean(abs(PredData$MLerror))
sd(PredData$MLerror)
mean(abs(PredData$REGerror))
sd(PredData$REGerror)
set.seed(888)
model<- keras_model_sequential()
model %>%
layer_dense(units=100, activation='relu', input_shape=c(14)) %>%
layer_dropout(rate=.3) %>%
layer_dense(units=75, activation='relu') %>%
layer_dropout(rate=.3) %>%
layer_dense(units=50, activation='relu') %>%
layer_dense(units=25, activation='relu') %>%
layer_dense(units=10, activation='relu') %>%
layer_dense(units=3, activation='relu') %>%
layer_dense(units=1)
model %>%
layer_dense(units=100, activation='relu', input_shape=c(14)) %>%
layer_dropout(rate=.3) %>%
layer_dense(units=75, activation='relu') %>%
layer_dropout(rate=.3) %>%
layer_dense(units=50, activation='relu') %>%
layer_dense(units=25, activation='relu') %>%
layer_dense(units=10, activation='relu') %>%
layer_dense(units=3, activation='relu') %>%
layer_dense(units=1)
# Here you can replace the optimizer_rmsprop with just optimizer="rmsprop" if you're not interested in tweaking the models
# this specification of the optimizer has other model tuning parameters you can specify, but you'll have to look them up.
#Compile
model %>% compile(loss= tf$metrics$mean_squared_error,
optimizer_adam(learning_rate=.004),
metrics=tf$metrics$mae)
mymodel<- model %>%
fit(training,
trainingtarget,
epochs=100,
batch_size=64,
validation_split=.3)
# Evaluate ----------------------------------------------------------------
model %>% evaluate(test, testtarget)
pred<- model %>% predict(test)
mean(abs((testtarget-pred)*100))
sd(((testtarget-pred)*100))
plot(testtarget, pred)
set.seed(888)
model<- keras_model_sequential()
model %>%
layer_dense(units=100, activation='relu', input_shape=c(14)) %>%
layer_dropout(rate=.5) %>%
layer_dense(units=75, activation='relu') %>%
layer_dropout(rate=.5) %>%
layer_dense(units=50, activation='relu') %>%
layer_dense(units=25, activation='relu') %>%
layer_dense(units=10, activation='relu') %>%
layer_dense(units=4, activation='relu') %>%
layer_dense(units=1)
# Compiling the model -----------------------------------------------------
# Here you can replace the optimizer_rmsprop with just optimizer="rmsprop" if you're not interested in tweaking the models
# this specification of the optimizer has other model tuning parameters you can specify, but you'll have to look them up.
#Compile
model %>% compile(loss= tf$metrics$mean_squared_error,
optimizer_adamax(learning_rate=.004),
metrics=tf$metrics$mae)
#optimizer_rmsprop(learning_rate=0.002, momentum=0.02),
# Fit model -------------------------------------------------------------
mymodel<- model %>%
fit(training,
trainingtarget,
epochs=100,
batch_size=64,
validation_split=.3)
# Evaluate ----------------------------------------------------------------
model %>% evaluate(test, testtarget)
pred<- model %>% predict(test)
mean(abs((testtarget-pred)*100))
sd(((testtarget-pred)*100))
plot(testtarget, pred)
library(Rolodex)
run_app()
golem::add_shinyappsio_file()
pkgload::load_all(export_all = F,helpers = F,attach_testthat = FALSE)
options( "golem.app.prod" = TRUE)
Rolodex::run_app() # add parameters here (if any)
library(Rolodex)
run_app()
library(caret)
expand.grid(EB_1=c(1:100),
EB_2=c(1:100),
EB_3=c(1:100),
EB_5=c(1:100),
EB_6=c(1:100),
EB_8=c(1:100),
OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5),
OBN_6=c(0:5),
OBN_7=c(0:5),
OBN_8=c(0:5),
OBN_9=c(0:5),
OBN_10=c(0:5),
OBN_11=c(0:5),
OBN_12=c(0:5),
OBN_13=c(0:5),
OBN_14=c(0:5),
OBN_15=c(0:5),
OBN_16=c(0:5),
OBN_17=c(0:5),
OBN_18=c(0:5),
OBN_19=c(0:5),
OBN_20=c(0:5),
OBN_21=c(0:5),
OBN_22=c(0:5),
OBN_23=c(0:5),
OBN_24=c(0:5),
OBN_25=c(0:5),
OBN_26=c(0:5),
OBN_27=c(0:5),
EDI_1=c(1:100),
EDI_2=c(1:100),
EDI_3=c(1:100),
EDI_4=c(1:100),
EDI_5=c(1:100),
EDI_6=c(1:100),
EDI_7=c(1:100),
EDI_8=c(1:100))
Data<-expand.grid(EB_1=c(1:100),
EB_2=c(1:100),
EB_3=c(1:100),
EB_5=c(1:100),
EB_6=c(1:100),
EB_8=c(1:100),
OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5),
OBN_6=c(0:5),
OBN_7=c(0:5),
OBN_8=c(0:5),
OBN_9=c(0:5),
OBN_10=c(0:5),
OBN_11=c(0:5),
OBN_12=c(0:5),
OBN_13=c(0:5),
OBN_14=c(0:5),
OBN_15=c(0:5),
OBN_16=c(0:5),
OBN_17=c(0:5),
OBN_18=c(0:5),
OBN_19=c(0:5),
OBN_20=c(0:5),
OBN_21=c(0:5),
OBN_22=c(0:5),
OBN_23=c(0:5),
OBN_24=c(0:5),
OBN_25=c(0:5),
OBN_26=c(0:5),
OBN_27=c(0:5),
EDI_1=c(1:100),
EDI_2=c(1:100),
EDI_3=c(1:100),
EDI_4=c(1:100),
EDI_5=c(1:100),
EDI_6=c(1:100),
EDI_7=c(1:100),
EDI_8=c(1:100))
Data<-expand.grid(EB_1=c(50:100),
EB_2=c(50:100),
EB_3=c(50:100),
EB_5=c(50:100),
EB_6=c(50:100),
EB_8=c(50:100),
OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5),
OBN_6=c(0:5),
OBN_7=c(0:5),
OBN_8=c(0:5),
OBN_9=c(0:5),
OBN_10=c(0:5),
OBN_11=c(0:5),
OBN_12=c(0:5),
OBN_13=c(0:5),
OBN_14=c(0:5),
OBN_15=c(0:5),
OBN_16=c(0:5),
OBN_17=c(0:5),
OBN_18=c(0:5),
OBN_19=c(0:5),
OBN_20=c(0:5),
OBN_21=c(0:5),
OBN_22=c(0:5),
OBN_23=c(0:5),
OBN_24=c(0:5),
OBN_25=c(0:5),
OBN_26=c(0:5),
OBN_27=c(0:5),
EDI_1=c(50:100),
EDI_2=c(50:100),
EDI_3=c(50:100),
EDI_4=c(50:100),
EDI_5=c(50:100),
EDI_6=c(50:100),
EDI_7=c(50:100),
EDI_8=c(50:100)
)
Data<-expand.grid(EB_1=c(50:100),
EB_2=c(50:100),
EB_3=c(50:100),
EB_5=c(50:100),
EB_6=c(50:100),
EB_8=c(50:100))
Data<-expand.grid(EB_1=c(25,50,75,100),
EB_2=c(25,50,75,100),
EB_3=c(25,50,75,100),
EB_5=c(25,50,75,100),
EB_6=c(25,50,75,100),
EB_8=c(25,50,75,100))
Data<-expand.grid(EB_1=c(25,50,75,100),
EB_2=c(25,50,75,100),
EB_3=c(25,50,75,100),
EB_5=c(25,50,75,100),
EB_6=c(25,50,75,100),
EB_8=c(25,50,75,100),
OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5),
OBN_6=c(0:5),
OBN_7=c(0:5),
OBN_8=c(0:5),
OBN_9=c(0:5),
OBN_10=c(0:5),
OBN_11=c(0:5),
OBN_12=c(0:5),
OBN_13=c(0:5),
OBN_14=c(0:5),
OBN_15=c(0:5),
OBN_16=c(0:5),
OBN_17=c(0:5),
OBN_18=c(0:5),
OBN_19=c(0:5),
OBN_20=c(0:5),
OBN_21=c(0:5),
OBN_22=c(0:5),
OBN_23=c(0:5),
OBN_24=c(0:5),
OBN_25=c(0:5),
OBN_26=c(0:5),
OBN_27=c(0:5),
EDI_1=c(25,50,75,100),
EDI_2=c(25,50,75,100),
EDI_3=c(25,50,75,100),
EDI_4=c(25,50,75,100),
EDI_5=c(25,50,75,100),
EDI_6=c(25,50,75,100),
EDI_7=c(25,50,75,100),
EDI_8=c(25,50,75,100)
)
OBNcombos<-expand.grid(OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5),
OBN_6=c(0:5),
OBN_7=c(0:5),
OBN_8=c(0:5),
OBN_9=c(0:5),
OBN_10=c(0:5),
OBN_11=c(0:5),
OBN_12=c(0:5),
OBN_13=c(0:5),
OBN_14=c(0:5),
OBN_15=c(0:5),
OBN_16=c(0:5),
OBN_17=c(0:5),
OBN_18=c(0:5),
OBN_19=c(0:5),
OBN_20=c(0:5),
OBN_21=c(0:5),
OBN_22=c(0:5),
OBN_23=c(0:5),
OBN_24=c(0:5),
OBN_25=c(0:5),
OBN_26=c(0:5),
OBN_27=c(0:5))
OBN1_15<-expand.grid(OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5),
OBN_6=c(0:5),
OBN_7=c(0:5),
OBN_8=c(0:5),
OBN_9=c(0:5),
OBN_10=c(0:5),
OBN_11=c(0:5),
OBN_12=c(0:5),
OBN_13=c(0:5),
OBN_14=c(0:5),
OBN_15=c(0:5))
OBN1_15<-expand.grid(OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5))
OBN1_5<-expand.grid(OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5))
OBN_21_27<-expand.grid(OBN_21=c(0:5),
OBN_22=c(0:5),
OBN_23=c(0:5),
OBN_24=c(0:5),
OBN_25=c(0:5),
OBN_26=c(0:5),
OBN_27=c(0:5))
EBcombos<-expand.grid(EB_1=c(25,50,75,100),
EB_2=c(25,50,75,100),
EB_3=c(25,50,75,100),
EB_5=c(25,50,75,100),
EB_6=c(25,50,75,100),
EB_8=c(25,50,75,100))
OBN_5<-expand.grid(OBN_1=c(0:5),
OBN_2=c(0:5),
OBN_3=c(0:5),
OBN_4=c(0:5),
OBN_5=c(0:5))
OBN_5_10<-expand.grid(OBN_6=c(0:5),
OBN_7=c(0:5),
OBN_8=c(0:5),
OBN_9=c(0:5),
OBN_10=c(0:5))
OBN_11_15<-expand.grid(OBN_11=c(0:5),
OBN_12=c(0:5),
OBN_13=c(0:5),
OBN_14=c(0:5),
OBN_15=c(0:5))
OBN_16_20<-expand.grid(OBN_16=c(0:5),
OBN_17=c(0:5),
OBN_18=c(0:5),
OBN_19=c(0:5),
OBN_20=c(0:5))
OBN_21_27<-expand.grid(OBN_21=c(0:5),
OBN_22=c(0:5),
OBN_23=c(0:5),
OBN_24=c(0:5),
OBN_25=c(0:5),
OBN_26=c(0:5),
OBN_27=c(0:5))
EDIcombos<-expand.grid(EDI_1=c(25,50,75,100),
EDI_2=c(25,50,75,100),
EDI_3=c(25,50,75,100),
EDI_4=c(25,50,75,100),
EDI_5=c(25,50,75,100),
EDI_6=c(25,50,75,100),
EDI_7=c(25,50,75,100),
EDI_8=c(25,50,75,100)
)
View(EBcombos)
View(EBcombos)
library(Rolodex)
run_app()
## code to prepare `data` dataset goes here
data<-readxl::read_excel("data-raw/Rolodex.xlsx")
usethis::use_data(data, overwrite = TRUE)
library(Rolodex)
run_app()
library(Rolodex)
run_app()
## code to prepare `data` dataset goes here
data<-readxl::read_excel("data-raw/Rolodex.xlsx")
usethis::use_data(data, overwrite = TRUE)
library(Rolodex)
run_app()
## code to prepare `data` dataset goes here
data<-readxl::read_excel("data-raw/Rolodex.xlsx")
usethis::use_data(data, overwrite = TRUE)
library(Rolodex)
run_app()
devtools::install_github("EwokOzwok/Rolodex")
## code to prepare `data` dataset goes here
data<-readxl::read_excel("data-raw/Rolodex.xlsx")
usethis::use_data(data, overwrite = TRUE)
## code to prepare `data` dataset goes here
data<-readxl::read_excel("data-raw/Rolodex.xlsx")
usethis::use_data(data, overwrite = TRUE)
library(Rolodex)
run_app()
devtools::install_github("EwokOzwok/Rolodex")
library(Rolodex)
run_app()
## code to prepare `data` dataset goes here
data<-readxl::read_excel("data-raw/Rolodex.xlsx")
usethis::use_data(data, overwrite = TRUE)
run_app()
library(Rolodex)
remove.packages("Rolodex")
